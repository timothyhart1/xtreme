/**
 * Xtreme Octane API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class VehicleService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param vehicleId 
     * @param memberId 
     * @param manufacturer 
     * @param model 
     * @param year 
     * @param mileage 
     * @param plate 
     * @param color 
     * @param vehicleImage 
     * @param hasImage 
     * @param memberMemberId 
     * @param memberUserId 
     * @param memberEmail 
     * @param memberName 
     * @param memberSurname 
     * @param memberCity 
     * @param memberPhoneNumber 
     * @param memberGender 
     * @param memberCreateDate 
     * @param memberDeleted 
     * @param memberVerified 
     * @param memberProfilePicture 
     * @param memberImage 
     * @param memberUserId2 
     * @param memberUserUserName 
     * @param memberUserNormalizedUserName 
     * @param memberUserEmail 
     * @param memberUserNormalizedEmail 
     * @param memberUserEmailConfirmed 
     * @param memberUserPasswordHash 
     * @param memberUserSecurityStamp 
     * @param memberUserConcurrencyStamp 
     * @param memberUserPhoneNumber 
     * @param memberUserPhoneNumberConfirmed 
     * @param memberUserTwoFactorEnabled 
     * @param memberUserLockoutEnd 
     * @param memberUserLockoutEnabled 
     * @param memberUserAccessFailedCount 
     * @param image 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleAddVehiclePost(vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleAddVehiclePost(vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleAddVehiclePost(vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleAddVehiclePost(vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (vehicleId !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicleId', <any>vehicleId) as any || localVarFormParams;
        }
        if (memberId !== undefined) {
            localVarFormParams = localVarFormParams.append('MemberId', <any>memberId) as any || localVarFormParams;
        }
        if (manufacturer !== undefined) {
            localVarFormParams = localVarFormParams.append('Manufacturer', <any>manufacturer) as any || localVarFormParams;
        }
        if (model !== undefined) {
            localVarFormParams = localVarFormParams.append('Model', <any>model) as any || localVarFormParams;
        }
        if (year !== undefined) {
            localVarFormParams = localVarFormParams.append('Year', <any>year) as any || localVarFormParams;
        }
        if (mileage !== undefined) {
            localVarFormParams = localVarFormParams.append('Mileage', <any>mileage) as any || localVarFormParams;
        }
        if (plate !== undefined) {
            localVarFormParams = localVarFormParams.append('Plate', <any>plate) as any || localVarFormParams;
        }
        if (color !== undefined) {
            localVarFormParams = localVarFormParams.append('Color', <any>color) as any || localVarFormParams;
        }
        if (vehicleImage !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicleImage', <any>vehicleImage) as any || localVarFormParams;
        }
        if (hasImage !== undefined) {
            localVarFormParams = localVarFormParams.append('HasImage', <any>hasImage) as any || localVarFormParams;
        }
        if (memberMemberId !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.MemberId', <any>memberMemberId) as any || localVarFormParams;
        }
        if (memberUserId !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.UserId', <any>memberUserId) as any || localVarFormParams;
        }
        if (memberEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Email', <any>memberEmail) as any || localVarFormParams;
        }
        if (memberName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Name', <any>memberName) as any || localVarFormParams;
        }
        if (memberSurname !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Surname', <any>memberSurname) as any || localVarFormParams;
        }
        if (memberCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.City', <any>memberCity) as any || localVarFormParams;
        }
        if (memberPhoneNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.PhoneNumber', <any>memberPhoneNumber) as any || localVarFormParams;
        }
        if (memberGender !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Gender', <any>memberGender) as any || localVarFormParams;
        }
        if (memberCreateDate !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.CreateDate', <any>memberCreateDate) as any || localVarFormParams;
        }
        if (memberDeleted !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Deleted', <any>memberDeleted) as any || localVarFormParams;
        }
        if (memberVerified !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Verified', <any>memberVerified) as any || localVarFormParams;
        }
        if (memberProfilePicture !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.ProfilePicture', <any>memberProfilePicture) as any || localVarFormParams;
        }
        if (memberImage !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Image', <any>memberImage) as any || localVarFormParams;
        }
        if (memberUserId2 !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.Id', <any>memberUserId2) as any || localVarFormParams;
        }
        if (memberUserUserName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.UserName', <any>memberUserUserName) as any || localVarFormParams;
        }
        if (memberUserNormalizedUserName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.NormalizedUserName', <any>memberUserNormalizedUserName) as any || localVarFormParams;
        }
        if (memberUserEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.Email', <any>memberUserEmail) as any || localVarFormParams;
        }
        if (memberUserNormalizedEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.NormalizedEmail', <any>memberUserNormalizedEmail) as any || localVarFormParams;
        }
        if (memberUserEmailConfirmed !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.EmailConfirmed', <any>memberUserEmailConfirmed) as any || localVarFormParams;
        }
        if (memberUserPasswordHash !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PasswordHash', <any>memberUserPasswordHash) as any || localVarFormParams;
        }
        if (memberUserSecurityStamp !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.SecurityStamp', <any>memberUserSecurityStamp) as any || localVarFormParams;
        }
        if (memberUserConcurrencyStamp !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.ConcurrencyStamp', <any>memberUserConcurrencyStamp) as any || localVarFormParams;
        }
        if (memberUserPhoneNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PhoneNumber', <any>memberUserPhoneNumber) as any || localVarFormParams;
        }
        if (memberUserPhoneNumberConfirmed !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PhoneNumberConfirmed', <any>memberUserPhoneNumberConfirmed) as any || localVarFormParams;
        }
        if (memberUserTwoFactorEnabled !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.TwoFactorEnabled', <any>memberUserTwoFactorEnabled) as any || localVarFormParams;
        }
        if (memberUserLockoutEnd !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.LockoutEnd', <any>memberUserLockoutEnd) as any || localVarFormParams;
        }
        if (memberUserLockoutEnabled !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.LockoutEnabled', <any>memberUserLockoutEnabled) as any || localVarFormParams;
        }
        if (memberUserAccessFailedCount !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.AccessFailedCount', <any>memberUserAccessFailedCount) as any || localVarFormParams;
        }
        if (image !== undefined) {
            localVarFormParams = localVarFormParams.append('Image', <any>image) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/AddVehicle`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleDeleteVehicleIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleDeleteVehicleIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleDeleteVehicleIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleDeleteVehicleIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleDeleteVehicleIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/DeleteVehicle/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleDeleteVehicleImageIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleDeleteVehicleImageIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleDeleteVehicleImageIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleDeleteVehicleImageIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleDeleteVehicleImageIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/DeleteVehicleImage/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param vehicleId 
     * @param memberId 
     * @param manufacturer 
     * @param model 
     * @param year 
     * @param mileage 
     * @param plate 
     * @param color 
     * @param vehicleImage 
     * @param hasImage 
     * @param memberMemberId 
     * @param memberUserId 
     * @param memberEmail 
     * @param memberName 
     * @param memberSurname 
     * @param memberCity 
     * @param memberPhoneNumber 
     * @param memberGender 
     * @param memberCreateDate 
     * @param memberDeleted 
     * @param memberVerified 
     * @param memberProfilePicture 
     * @param memberImage 
     * @param memberUserId2 
     * @param memberUserUserName 
     * @param memberUserNormalizedUserName 
     * @param memberUserEmail 
     * @param memberUserNormalizedEmail 
     * @param memberUserEmailConfirmed 
     * @param memberUserPasswordHash 
     * @param memberUserSecurityStamp 
     * @param memberUserConcurrencyStamp 
     * @param memberUserPhoneNumber 
     * @param memberUserPhoneNumberConfirmed 
     * @param memberUserTwoFactorEnabled 
     * @param memberUserLockoutEnd 
     * @param memberUserLockoutEnabled 
     * @param memberUserAccessFailedCount 
     * @param image 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleEditVehicleIdPut(id: number, vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleEditVehicleIdPut(id: number, vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleEditVehicleIdPut(id: number, vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleEditVehicleIdPut(id: number, vehicleId?: number, memberId?: number, manufacturer?: string, model?: string, year?: string, mileage?: number, plate?: string, color?: string, vehicleImage?: string, hasImage?: boolean, memberMemberId?: number, memberUserId?: string, memberEmail?: string, memberName?: string, memberSurname?: string, memberCity?: string, memberPhoneNumber?: string, memberGender?: string, memberCreateDate?: string, memberDeleted?: boolean, memberVerified?: boolean, memberProfilePicture?: string, memberImage?: Blob, memberUserId2?: string, memberUserUserName?: string, memberUserNormalizedUserName?: string, memberUserEmail?: string, memberUserNormalizedEmail?: string, memberUserEmailConfirmed?: boolean, memberUserPasswordHash?: string, memberUserSecurityStamp?: string, memberUserConcurrencyStamp?: string, memberUserPhoneNumber?: string, memberUserPhoneNumberConfirmed?: boolean, memberUserTwoFactorEnabled?: boolean, memberUserLockoutEnd?: string, memberUserLockoutEnabled?: boolean, memberUserAccessFailedCount?: number, image?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleEditVehicleIdPut.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (vehicleId !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicleId', <any>vehicleId) as any || localVarFormParams;
        }
        if (memberId !== undefined) {
            localVarFormParams = localVarFormParams.append('MemberId', <any>memberId) as any || localVarFormParams;
        }
        if (manufacturer !== undefined) {
            localVarFormParams = localVarFormParams.append('Manufacturer', <any>manufacturer) as any || localVarFormParams;
        }
        if (model !== undefined) {
            localVarFormParams = localVarFormParams.append('Model', <any>model) as any || localVarFormParams;
        }
        if (year !== undefined) {
            localVarFormParams = localVarFormParams.append('Year', <any>year) as any || localVarFormParams;
        }
        if (mileage !== undefined) {
            localVarFormParams = localVarFormParams.append('Mileage', <any>mileage) as any || localVarFormParams;
        }
        if (plate !== undefined) {
            localVarFormParams = localVarFormParams.append('Plate', <any>plate) as any || localVarFormParams;
        }
        if (color !== undefined) {
            localVarFormParams = localVarFormParams.append('Color', <any>color) as any || localVarFormParams;
        }
        if (vehicleImage !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicleImage', <any>vehicleImage) as any || localVarFormParams;
        }
        if (hasImage !== undefined) {
            localVarFormParams = localVarFormParams.append('HasImage', <any>hasImage) as any || localVarFormParams;
        }
        if (memberMemberId !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.MemberId', <any>memberMemberId) as any || localVarFormParams;
        }
        if (memberUserId !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.UserId', <any>memberUserId) as any || localVarFormParams;
        }
        if (memberEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Email', <any>memberEmail) as any || localVarFormParams;
        }
        if (memberName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Name', <any>memberName) as any || localVarFormParams;
        }
        if (memberSurname !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Surname', <any>memberSurname) as any || localVarFormParams;
        }
        if (memberCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.City', <any>memberCity) as any || localVarFormParams;
        }
        if (memberPhoneNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.PhoneNumber', <any>memberPhoneNumber) as any || localVarFormParams;
        }
        if (memberGender !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Gender', <any>memberGender) as any || localVarFormParams;
        }
        if (memberCreateDate !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.CreateDate', <any>memberCreateDate) as any || localVarFormParams;
        }
        if (memberDeleted !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Deleted', <any>memberDeleted) as any || localVarFormParams;
        }
        if (memberVerified !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Verified', <any>memberVerified) as any || localVarFormParams;
        }
        if (memberProfilePicture !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.ProfilePicture', <any>memberProfilePicture) as any || localVarFormParams;
        }
        if (memberImage !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.Image', <any>memberImage) as any || localVarFormParams;
        }
        if (memberUserId2 !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.Id', <any>memberUserId2) as any || localVarFormParams;
        }
        if (memberUserUserName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.UserName', <any>memberUserUserName) as any || localVarFormParams;
        }
        if (memberUserNormalizedUserName !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.NormalizedUserName', <any>memberUserNormalizedUserName) as any || localVarFormParams;
        }
        if (memberUserEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.Email', <any>memberUserEmail) as any || localVarFormParams;
        }
        if (memberUserNormalizedEmail !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.NormalizedEmail', <any>memberUserNormalizedEmail) as any || localVarFormParams;
        }
        if (memberUserEmailConfirmed !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.EmailConfirmed', <any>memberUserEmailConfirmed) as any || localVarFormParams;
        }
        if (memberUserPasswordHash !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PasswordHash', <any>memberUserPasswordHash) as any || localVarFormParams;
        }
        if (memberUserSecurityStamp !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.SecurityStamp', <any>memberUserSecurityStamp) as any || localVarFormParams;
        }
        if (memberUserConcurrencyStamp !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.ConcurrencyStamp', <any>memberUserConcurrencyStamp) as any || localVarFormParams;
        }
        if (memberUserPhoneNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PhoneNumber', <any>memberUserPhoneNumber) as any || localVarFormParams;
        }
        if (memberUserPhoneNumberConfirmed !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.PhoneNumberConfirmed', <any>memberUserPhoneNumberConfirmed) as any || localVarFormParams;
        }
        if (memberUserTwoFactorEnabled !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.TwoFactorEnabled', <any>memberUserTwoFactorEnabled) as any || localVarFormParams;
        }
        if (memberUserLockoutEnd !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.LockoutEnd', <any>memberUserLockoutEnd) as any || localVarFormParams;
        }
        if (memberUserLockoutEnabled !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.LockoutEnabled', <any>memberUserLockoutEnabled) as any || localVarFormParams;
        }
        if (memberUserAccessFailedCount !== undefined) {
            localVarFormParams = localVarFormParams.append('Member.User.AccessFailedCount', <any>memberUserAccessFailedCount) as any || localVarFormParams;
        }
        if (image !== undefined) {
            localVarFormParams = localVarFormParams.append('Image', <any>image) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/EditVehicle/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleGetAllMemberVehiclesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleGetAllMemberVehiclesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleGetAllMemberVehiclesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleGetAllMemberVehiclesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleGetAllMemberVehiclesIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/GetAllMemberVehicles/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleGetAllVehiclesGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleGetAllVehiclesGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleGetAllVehiclesGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleGetAllVehiclesGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/GetAllVehicles`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleGetMemberVehicleIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleGetMemberVehicleIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleGetMemberVehicleIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleGetMemberVehicleIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleGetMemberVehicleIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/GetMemberVehicle/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleGetVehicleImageIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public vehicleGetVehicleImageIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public vehicleGetVehicleImageIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public vehicleGetVehicleImageIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling vehicleGetVehicleImageIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/Vehicle/GetVehicleImage/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
